/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface BlogShopInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addArticle"
      | "articles"
      | "decimals"
      | "getContractBalance"
      | "helloWorld"
      | "nextArticleId"
      | "owner"
      | "purchaseArticle"
      | "token"
      | "withdrawETH"
      | "withdrawJT"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ArticleAdded" | "ArticlePurchased" | "ReceivedETH"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addArticle",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "articles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "helloWorld",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextArticleId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseArticle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawJT",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addArticle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "articles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "helloWorld", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextArticleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseArticle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawJT", data: BytesLike): Result;
}

export namespace ArticleAddedEvent {
  export type InputTuple = [
    articleId: BigNumberish,
    price: BigNumberish,
    link: string
  ];
  export type OutputTuple = [articleId: bigint, price: bigint, link: string];
  export interface OutputObject {
    articleId: bigint;
    price: bigint;
    link: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ArticlePurchasedEvent {
  export type InputTuple = [
    buyer: AddressLike,
    articleId: BigNumberish,
    link: string
  ];
  export type OutputTuple = [buyer: string, articleId: bigint, link: string];
  export interface OutputObject {
    buyer: string;
    articleId: bigint;
    link: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceivedETHEvent {
  export type InputTuple = [sender: AddressLike, amount: BigNumberish];
  export type OutputTuple = [sender: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BlogShop extends BaseContract {
  connect(runner?: ContractRunner | null): BlogShop;
  waitForDeployment(): Promise<this>;

  interface: BlogShopInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addArticle: TypedContractMethod<
    [priceInJT: BigNumberish, link: string],
    [void],
    "nonpayable"
  >;

  articles: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint, string] & { id: bigint; price: bigint; link: string }],
    "view"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  helloWorld: TypedContractMethod<[], [string], "view">;

  nextArticleId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  purchaseArticle: TypedContractMethod<
    [articleId: BigNumberish],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  withdrawETH: TypedContractMethod<[], [void], "nonpayable">;

  withdrawJT: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addArticle"
  ): TypedContractMethod<
    [priceInJT: BigNumberish, link: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "articles"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint, string] & { id: bigint; price: bigint; link: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "helloWorld"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextArticleId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "purchaseArticle"
  ): TypedContractMethod<[articleId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawJT"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ArticleAdded"
  ): TypedContractEvent<
    ArticleAddedEvent.InputTuple,
    ArticleAddedEvent.OutputTuple,
    ArticleAddedEvent.OutputObject
  >;
  getEvent(
    key: "ArticlePurchased"
  ): TypedContractEvent<
    ArticlePurchasedEvent.InputTuple,
    ArticlePurchasedEvent.OutputTuple,
    ArticlePurchasedEvent.OutputObject
  >;
  getEvent(
    key: "ReceivedETH"
  ): TypedContractEvent<
    ReceivedETHEvent.InputTuple,
    ReceivedETHEvent.OutputTuple,
    ReceivedETHEvent.OutputObject
  >;

  filters: {
    "ArticleAdded(uint256,uint256,string)": TypedContractEvent<
      ArticleAddedEvent.InputTuple,
      ArticleAddedEvent.OutputTuple,
      ArticleAddedEvent.OutputObject
    >;
    ArticleAdded: TypedContractEvent<
      ArticleAddedEvent.InputTuple,
      ArticleAddedEvent.OutputTuple,
      ArticleAddedEvent.OutputObject
    >;

    "ArticlePurchased(address,uint256,string)": TypedContractEvent<
      ArticlePurchasedEvent.InputTuple,
      ArticlePurchasedEvent.OutputTuple,
      ArticlePurchasedEvent.OutputObject
    >;
    ArticlePurchased: TypedContractEvent<
      ArticlePurchasedEvent.InputTuple,
      ArticlePurchasedEvent.OutputTuple,
      ArticlePurchasedEvent.OutputObject
    >;

    "ReceivedETH(address,uint256)": TypedContractEvent<
      ReceivedETHEvent.InputTuple,
      ReceivedETHEvent.OutputTuple,
      ReceivedETHEvent.OutputObject
    >;
    ReceivedETH: TypedContractEvent<
      ReceivedETHEvent.InputTuple,
      ReceivedETHEvent.OutputTuple,
      ReceivedETHEvent.OutputObject
    >;
  };
}
