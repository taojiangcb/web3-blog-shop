/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace BlogShop {
  export type ArticleStruct = {
    id: BigNumberish;
    price: BigNumberish;
    title: string;
    description: string;
    image: string;
    link: string;
    createTime: string;
  };

  export type ArticleStructOutput = [
    id: bigint,
    price: bigint,
    title: string,
    description: string,
    image: string,
    link: string,
    createTime: string
  ] & {
    id: bigint;
    price: bigint;
    title: string;
    description: string;
    image: string;
    link: string;
    createTime: string;
  };

  export type PurchaseStruct = {
    purchaseId: BigNumberish;
    buyer: AddressLike;
    articleId: BigNumberish;
  };

  export type PurchaseStructOutput = [
    purchaseId: bigint,
    buyer: string,
    articleId: bigint
  ] & { purchaseId: bigint; buyer: string; articleId: bigint };

  export type PurchasedListItemStruct = {
    article: BlogShop.ArticleStruct;
    count: BigNumberish;
    isBought: boolean;
  };

  export type PurchasedListItemStructOutput = [
    article: BlogShop.ArticleStructOutput,
    count: bigint,
    isBought: boolean
  ] & {
    article: BlogShop.ArticleStructOutput;
    count: bigint;
    isBought: boolean;
  };
}

export interface BlogShopInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "MINTER_ROLE"
      | "addArticle"
      | "articleIds"
      | "articles"
      | "clearAllPurchase"
      | "clearArticles"
      | "getAllArticles"
      | "getAllPurchases"
      | "getArticleCount"
      | "getArticleItemsForBuy"
      | "getContractETH"
      | "getContractJT"
      | "getPUrchaseByBuyer"
      | "getPurchaseCount"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "nextArticleId"
      | "owner"
      | "purchaseArticle"
      | "purchaseCount"
      | "purchaseIds"
      | "purchases"
      | "removeArticle"
      | "renounceRole"
      | "revokeRole"
      | "setDescription"
      | "setLink"
      | "setPrice"
      | "setTitle"
      | "supportsInterface"
      | "tokenAddress"
      | "withdrawETH"
      | "withdrawJT"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ArticleAdded"
      | "ArticlePurchased"
      | "ClearArticles"
      | "RemovedArticle"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addArticle",
    values: [BigNumberish, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "articleIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "articles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clearAllPurchase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "clearArticles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllArticles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPurchases",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getArticleCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getArticleItemsForBuy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractJT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPUrchaseByBuyer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPurchaseCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextArticleId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseArticle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchases",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeArticle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDescription",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLink",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTitle",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawJT",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addArticle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "articleIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "articles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearAllPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearArticles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllArticles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPurchases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArticleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArticleItemsForBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractJT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPUrchaseByBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPurchaseCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextArticleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseArticle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "purchases", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeArticle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLink", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTitle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawJT", data: BytesLike): Result;
}

export namespace ArticleAddedEvent {
  export type InputTuple = [
    sender: AddressLike,
    articleId: BigNumberish,
    title: string
  ];
  export type OutputTuple = [sender: string, articleId: bigint, title: string];
  export interface OutputObject {
    sender: string;
    articleId: bigint;
    title: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ArticlePurchasedEvent {
  export type InputTuple = [
    buyer: AddressLike,
    articleId: BigNumberish,
    link: string
  ];
  export type OutputTuple = [buyer: string, articleId: bigint, link: string];
  export interface OutputObject {
    buyer: string;
    articleId: bigint;
    link: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClearArticlesEvent {
  export type InputTuple = [sender: AddressLike];
  export type OutputTuple = [sender: string];
  export interface OutputObject {
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemovedArticleEvent {
  export type InputTuple = [
    sender: AddressLike,
    articleId: BigNumberish,
    title: string
  ];
  export type OutputTuple = [sender: string, articleId: bigint, title: string];
  export interface OutputObject {
    sender: string;
    articleId: bigint;
    title: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BlogShop extends BaseContract {
  connect(runner?: ContractRunner | null): BlogShop;
  waitForDeployment(): Promise<this>;

  interface: BlogShopInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MINTER_ROLE: TypedContractMethod<[], [string], "view">;

  addArticle: TypedContractMethod<
    [
      price: BigNumberish,
      title: string,
      description: string,
      image: string,
      link: string,
      createTime: string
    ],
    [void],
    "nonpayable"
  >;

  articleIds: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  articles: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, string, string, string] & {
        id: bigint;
        price: bigint;
        title: string;
        description: string;
        image: string;
        link: string;
        createTime: string;
      }
    ],
    "view"
  >;

  clearAllPurchase: TypedContractMethod<[], [void], "nonpayable">;

  clearArticles: TypedContractMethod<[], [void], "nonpayable">;

  getAllArticles: TypedContractMethod<
    [],
    [BlogShop.ArticleStructOutput[]],
    "view"
  >;

  getAllPurchases: TypedContractMethod<
    [],
    [BlogShop.PurchaseStructOutput[]],
    "view"
  >;

  getArticleCount: TypedContractMethod<[], [bigint], "view">;

  getArticleItemsForBuy: TypedContractMethod<
    [],
    [BlogShop.PurchasedListItemStructOutput[]],
    "view"
  >;

  getContractETH: TypedContractMethod<[], [bigint], "view">;

  getContractJT: TypedContractMethod<[], [bigint], "view">;

  getPUrchaseByBuyer: TypedContractMethod<
    [buyer: AddressLike],
    [BlogShop.PurchaseStructOutput[]],
    "view"
  >;

  getPurchaseCount: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  nextArticleId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  purchaseArticle: TypedContractMethod<
    [articleId: BigNumberish],
    [void],
    "nonpayable"
  >;

  purchaseCount: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  purchaseIds: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  purchases: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint] & {
        purchaseId: bigint;
        buyer: string;
        articleId: bigint;
      }
    ],
    "view"
  >;

  removeArticle: TypedContractMethod<
    [articleId: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setDescription: TypedContractMethod<
    [articleId: BigNumberish, description: string],
    [boolean],
    "nonpayable"
  >;

  setLink: TypedContractMethod<
    [articleId: BigNumberish, link: string],
    [boolean],
    "nonpayable"
  >;

  setPrice: TypedContractMethod<
    [articleId: BigNumberish, price: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  setTitle: TypedContractMethod<
    [articleId: BigNumberish, title: string],
    [boolean],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenAddress: TypedContractMethod<[], [string], "view">;

  withdrawETH: TypedContractMethod<[], [void], "nonpayable">;

  withdrawJT: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MINTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addArticle"
  ): TypedContractMethod<
    [
      price: BigNumberish,
      title: string,
      description: string,
      image: string,
      link: string,
      createTime: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "articleIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "articles"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, string, string, string] & {
        id: bigint;
        price: bigint;
        title: string;
        description: string;
        image: string;
        link: string;
        createTime: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "clearAllPurchase"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "clearArticles"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllArticles"
  ): TypedContractMethod<[], [BlogShop.ArticleStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getAllPurchases"
  ): TypedContractMethod<[], [BlogShop.PurchaseStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getArticleCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getArticleItemsForBuy"
  ): TypedContractMethod<
    [],
    [BlogShop.PurchasedListItemStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractETH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getContractJT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPUrchaseByBuyer"
  ): TypedContractMethod<
    [buyer: AddressLike],
    [BlogShop.PurchaseStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPurchaseCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextArticleId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "purchaseArticle"
  ): TypedContractMethod<[articleId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "purchaseCount"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "purchaseIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "purchases"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint] & {
        purchaseId: bigint;
        buyer: string;
        articleId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeArticle"
  ): TypedContractMethod<[articleId: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDescription"
  ): TypedContractMethod<
    [articleId: BigNumberish, description: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLink"
  ): TypedContractMethod<
    [articleId: BigNumberish, link: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPrice"
  ): TypedContractMethod<
    [articleId: BigNumberish, price: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTitle"
  ): TypedContractMethod<
    [articleId: BigNumberish, title: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawJT"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ArticleAdded"
  ): TypedContractEvent<
    ArticleAddedEvent.InputTuple,
    ArticleAddedEvent.OutputTuple,
    ArticleAddedEvent.OutputObject
  >;
  getEvent(
    key: "ArticlePurchased"
  ): TypedContractEvent<
    ArticlePurchasedEvent.InputTuple,
    ArticlePurchasedEvent.OutputTuple,
    ArticlePurchasedEvent.OutputObject
  >;
  getEvent(
    key: "ClearArticles"
  ): TypedContractEvent<
    ClearArticlesEvent.InputTuple,
    ClearArticlesEvent.OutputTuple,
    ClearArticlesEvent.OutputObject
  >;
  getEvent(
    key: "RemovedArticle"
  ): TypedContractEvent<
    RemovedArticleEvent.InputTuple,
    RemovedArticleEvent.OutputTuple,
    RemovedArticleEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "ArticleAdded(address,uint256,string)": TypedContractEvent<
      ArticleAddedEvent.InputTuple,
      ArticleAddedEvent.OutputTuple,
      ArticleAddedEvent.OutputObject
    >;
    ArticleAdded: TypedContractEvent<
      ArticleAddedEvent.InputTuple,
      ArticleAddedEvent.OutputTuple,
      ArticleAddedEvent.OutputObject
    >;

    "ArticlePurchased(address,uint256,string)": TypedContractEvent<
      ArticlePurchasedEvent.InputTuple,
      ArticlePurchasedEvent.OutputTuple,
      ArticlePurchasedEvent.OutputObject
    >;
    ArticlePurchased: TypedContractEvent<
      ArticlePurchasedEvent.InputTuple,
      ArticlePurchasedEvent.OutputTuple,
      ArticlePurchasedEvent.OutputObject
    >;

    "ClearArticles(address)": TypedContractEvent<
      ClearArticlesEvent.InputTuple,
      ClearArticlesEvent.OutputTuple,
      ClearArticlesEvent.OutputObject
    >;
    ClearArticles: TypedContractEvent<
      ClearArticlesEvent.InputTuple,
      ClearArticlesEvent.OutputTuple,
      ClearArticlesEvent.OutputObject
    >;

    "RemovedArticle(address,uint256,string)": TypedContractEvent<
      RemovedArticleEvent.InputTuple,
      RemovedArticleEvent.OutputTuple,
      RemovedArticleEvent.OutputObject
    >;
    RemovedArticle: TypedContractEvent<
      RemovedArticleEvent.InputTuple,
      RemovedArticleEvent.OutputTuple,
      RemovedArticleEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
