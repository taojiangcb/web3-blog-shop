{"version":3,"file":"341.2f197be74bb4d3e61b1b.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;;AClCsC;AAC2B;AACjE;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA;AACA,QAAQ;AACR;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,cAAc,+EAA+E;AAC7F;AACA;AACO,8BAA8B,qBAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,YAAY;AAC7C;AACA,mDAAmD,6BAA6B;AAChF;AACA,8BAA8B,KAAK;AACnC;AACA,8BAA8B,UAAU;AACxC;AACA,8BAA8B,UAAU;AACxC;AACA;AACA,gEAAgE,mBAAmB,KAAK,uBAAuB,sCAAsC,yBAAyB;AAC9K;AACA;AACA,0CAA0C,YAAY;AACtD;AACA,6EAA6E,mBAAmB,qBAAqB,iCAAiC;AACtJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,UAAU;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA,oIAAoI,uBAAuB;AAC3J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,EAAE;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,qBAAS;AACrD;AACA;AACA,qCAAqC,yCAAyC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kCAAkC;AAC9C,YAAY,SAAS;AACrB,YAAY,iBAAiB;AAC7B;AACA;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA,WAAW;AACX;AACA,+CAA+C,qCAAqC;AACpF,wCAAwC,6BAA6B;AACrE;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD;AACA;AACA;AACA,IAAI;AACJ;AACA,qDAAqD,wDAAwD;AAC7G,sCAAsC,8CAA8C;AACpF;AACA,mDAAmD,mDAAmD;AACtG;AACA;AACA;AACA;AACO,oCAAoC,qBAAS;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uGAAuG,wBAAwB,MAAM,mBAAmB;AACxJ;AACA;AACA,wGAAwG,yBAAyB,MAAM,mBAAmB;AAC1J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,oDAAoD,+BAA+B,EAAE;AAC7H;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,qBAAS;AACrD;AACA;AACA,2CAA2C,QAAQ;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://langchain-ai-agent/./node_modules/.pnpm/langchain@0.3.19_@langchain+core@0.3.42_openai@4.87.4_ws@8.18.1_zod@3.24.2___@langchain+deeps_pxpnwc4yhnzklj5cil5nybwo6i/node_modules/langchain/dist/util/set.js","webpack://langchain-ai-agent/./node_modules/.pnpm/langchain@0.3.19_@langchain+core@0.3.42_openai@4.87.4_ws@8.18.1_zod@3.24.2___@langchain+deeps_pxpnwc4yhnzklj5cil5nybwo6i/node_modules/langchain/dist/chains/sequential_chain.js"],"sourcesContent":["/**\n * Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#implementing_basic_set_operations\n */\n/**\n * returns intersection of two sets\n */\nexport function intersection(setA, setB) {\n    const _intersection = new Set();\n    for (const elem of setB) {\n        if (setA.has(elem)) {\n            _intersection.add(elem);\n        }\n    }\n    return _intersection;\n}\n/**\n * returns union of two sets\n */\nexport function union(setA, setB) {\n    const _union = new Set(setA);\n    for (const elem of setB) {\n        _union.add(elem);\n    }\n    return _union;\n}\n/**\n * returns difference of two sets\n */\nexport function difference(setA, setB) {\n    const _difference = new Set(setA);\n    for (const elem of setB) {\n        _difference.delete(elem);\n    }\n    return _difference;\n}\n","import { BaseChain } from \"./base.js\";\nimport { intersection, union, difference } from \"../util/set.js\";\nfunction formatSet(input) {\n    return Array.from(input)\n        .map((i) => `\"${i}\"`)\n        .join(\", \");\n}\n/**\n * Chain where the outputs of one chain feed directly into next.\n * @example\n * ```typescript\n * const promptTemplate = new PromptTemplate({\n *   template: `You are a playwright. Given the title of play and the era it is set in, it is your job to write a synopsis for that title.\n * Title: {title}\n * Era: {era}\n * Playwright: This is a synopsis for the above play:`,\n *   inputVariables: [\"title\", \"era\"],\n * });\n\n * const reviewPromptTemplate = new PromptTemplate({\n *   template: `You are a play critic from the New York Times. Given the synopsis of play, it is your job to write a review for that play.\n *\n *     Play Synopsis:\n *     {synopsis}\n *     Review from a New York Times play critic of the above play:`,\n *   inputVariables: [\"synopsis\"],\n * });\n\n * const overallChain = new SequentialChain({\n *   chains: [\n *     new LLMChain({\n *       llm: new ChatOpenAI({ temperature: 0 }),\n *       prompt: promptTemplate,\n *       outputKey: \"synopsis\",\n *     }),\n *     new LLMChain({\n *       llm: new OpenAI({ temperature: 0 }),\n *       prompt: reviewPromptTemplate,\n *       outputKey: \"review\",\n *     }),\n *   ],\n *   inputVariables: [\"era\", \"title\"],\n *   outputVariables: [\"synopsis\", \"review\"],\n *   verbose: true,\n * });\n\n * const chainExecutionResult = await overallChain.call({\n *   title: \"Tragedy at sunset on the beach\",\n *   era: \"Victorian England\",\n * });\n * console.log(chainExecutionResult);\n * ```\n *\n * @deprecated\n * Switch to {@link https://js.langchain.com/docs/expression_language/ | expression language}.\n * Will be removed in 0.2.0\n */\nexport class SequentialChain extends BaseChain {\n    static lc_name() {\n        return \"SequentialChain\";\n    }\n    get inputKeys() {\n        return this.inputVariables;\n    }\n    get outputKeys() {\n        return this.outputVariables;\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"chains\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnAll\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chains = fields.chains;\n        this.inputVariables = fields.inputVariables;\n        this.outputVariables = fields.outputVariables ?? [];\n        if (this.outputVariables.length > 0 && fields.returnAll) {\n            throw new Error(\"Either specify variables to return using `outputVariables` or use `returnAll` param. Cannot apply both conditions at the same time.\");\n        }\n        this.returnAll = fields.returnAll ?? false;\n        this._validateChains();\n    }\n    /** @ignore */\n    _validateChains() {\n        if (this.chains.length === 0) {\n            throw new Error(\"Sequential chain must have at least one chain.\");\n        }\n        const memoryKeys = this.memory?.memoryKeys ?? [];\n        const inputKeysSet = new Set(this.inputKeys);\n        const memoryKeysSet = new Set(memoryKeys);\n        const keysIntersection = intersection(inputKeysSet, memoryKeysSet);\n        if (keysIntersection.size > 0) {\n            throw new Error(`The following keys: ${formatSet(keysIntersection)} are overlapping between memory and input keys of the chain variables. This can lead to unexpected behaviour. Please use input and memory keys that don't overlap.`);\n        }\n        const availableKeys = union(inputKeysSet, memoryKeysSet);\n        for (const chain of this.chains) {\n            let missingKeys = difference(new Set(chain.inputKeys), availableKeys);\n            if (chain.memory) {\n                missingKeys = difference(missingKeys, new Set(chain.memory.memoryKeys));\n            }\n            if (missingKeys.size > 0) {\n                throw new Error(`Missing variables for chain \"${chain._chainType()}\": ${formatSet(missingKeys)}. Only got the following variables: ${formatSet(availableKeys)}.`);\n            }\n            const outputKeysSet = new Set(chain.outputKeys);\n            const overlappingOutputKeys = intersection(availableKeys, outputKeysSet);\n            if (overlappingOutputKeys.size > 0) {\n                throw new Error(`The following output variables for chain \"${chain._chainType()}\" are overlapping: ${formatSet(overlappingOutputKeys)}. This can lead to unexpected behaviour.`);\n            }\n            for (const outputKey of outputKeysSet) {\n                availableKeys.add(outputKey);\n            }\n        }\n        if (this.outputVariables.length === 0) {\n            if (this.returnAll) {\n                const outputKeys = difference(availableKeys, inputKeysSet);\n                this.outputVariables = Array.from(outputKeys);\n            }\n            else {\n                this.outputVariables = this.chains[this.chains.length - 1].outputKeys;\n            }\n        }\n        else {\n            const missingKeys = difference(new Set(this.outputVariables), new Set(availableKeys));\n            if (missingKeys.size > 0) {\n                throw new Error(`The following output variables were expected to be in the final chain output but were not found: ${formatSet(missingKeys)}.`);\n            }\n        }\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        let input = {};\n        const allChainValues = values;\n        let i = 0;\n        for (const chain of this.chains) {\n            i += 1;\n            input = await chain.call(allChainValues, runManager?.getChild(`step_${i}`));\n            for (const key of Object.keys(input)) {\n                allChainValues[key] = input[key];\n            }\n        }\n        const output = {};\n        for (const key of this.outputVariables) {\n            output[key] = allChainValues[key];\n        }\n        return output;\n    }\n    _chainType() {\n        return \"sequential_chain\";\n    }\n    static async deserialize(data) {\n        const chains = [];\n        const inputVariables = data.input_variables;\n        const outputVariables = data.output_variables;\n        const serializedChains = data.chains;\n        for (const serializedChain of serializedChains) {\n            const deserializedChain = await BaseChain.deserialize(serializedChain);\n            chains.push(deserializedChain);\n        }\n        return new SequentialChain({ chains, inputVariables, outputVariables });\n    }\n    serialize() {\n        const chains = [];\n        for (const chain of this.chains) {\n            chains.push(chain.serialize());\n        }\n        return {\n            _type: this._chainType(),\n            input_variables: this.inputVariables,\n            output_variables: this.outputVariables,\n            chains,\n        };\n    }\n}\n/**\n * @deprecated Switch to expression language: https://js.langchain.com/docs/expression_language/\n * Simple chain where a single string output of one chain is fed directly into the next.\n * @augments BaseChain\n * @augments SimpleSequentialChainInput\n *\n * @example\n * ```ts\n * import { SimpleSequentialChain, LLMChain } from \"langchain/chains\";\n * import { OpenAI } from \"langchain/llms/openai\";\n * import { PromptTemplate } from \"langchain/prompts\";\n *\n * // This is an LLMChain to write a synopsis given a title of a play.\n * const llm = new OpenAI({ temperature: 0 });\n * const template = `You are a playwright. Given the title of play, it is your job to write a synopsis for that title.\n *\n * Title: {title}\n * Playwright: This is a synopsis for the above play:`\n * const promptTemplate = new PromptTemplate({ template, inputVariables: [\"title\"] });\n * const synopsisChain = new LLMChain({ llm, prompt: promptTemplate });\n *\n *\n * // This is an LLMChain to write a review of a play given a synopsis.\n * const reviewLLM = new OpenAI({ temperature: 0 })\n * const reviewTemplate = `You are a play critic from the New York Times. Given the synopsis of play, it is your job to write a review for that play.\n *\n * Play Synopsis:\n * {synopsis}\n * Review from a New York Times play critic of the above play:`\n * const reviewPromptTemplate = new PromptTemplate({ template: reviewTemplate, inputVariables: [\"synopsis\"] });\n * const reviewChain = new LLMChain({ llm: reviewLLM, prompt: reviewPromptTemplate });\n *\n * const overallChain = new SimpleSequentialChain({chains: [synopsisChain, reviewChain], verbose:true})\n * const review = await overallChain.run(\"Tragedy at sunset on the beach\")\n * // the variable review contains resulting play review.\n * ```\n */\nexport class SimpleSequentialChain extends BaseChain {\n    static lc_name() {\n        return \"SimpleSequentialChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey];\n    }\n    get outputKeys() {\n        return [this.outputKey];\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"chains\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"output\"\n        });\n        Object.defineProperty(this, \"trimOutputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chains = fields.chains;\n        this.trimOutputs = fields.trimOutputs ?? false;\n        this._validateChains();\n    }\n    /** @ignore */\n    _validateChains() {\n        for (const chain of this.chains) {\n            if (chain.inputKeys.filter((k) => !chain.memory?.memoryKeys.includes(k) ?? true).length !== 1) {\n                throw new Error(`Chains used in SimpleSequentialChain should all have one input, got ${chain.inputKeys.length} for ${chain._chainType()}.`);\n            }\n            if (chain.outputKeys.length !== 1) {\n                throw new Error(`Chains used in SimpleSequentialChain should all have one output, got ${chain.outputKeys.length} for ${chain._chainType()}.`);\n            }\n        }\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        let input = values[this.inputKey];\n        let i = 0;\n        for (const chain of this.chains) {\n            i += 1;\n            input = (await chain.call({ [chain.inputKeys[0]]: input, signal: values.signal }, runManager?.getChild(`step_${i}`)))[chain.outputKeys[0]];\n            if (this.trimOutputs) {\n                input = input.trim();\n            }\n            await runManager?.handleText(input);\n        }\n        return { [this.outputKey]: input };\n    }\n    _chainType() {\n        return \"simple_sequential_chain\";\n    }\n    static async deserialize(data) {\n        const chains = [];\n        const serializedChains = data.chains;\n        for (const serializedChain of serializedChains) {\n            const deserializedChain = await BaseChain.deserialize(serializedChain);\n            chains.push(deserializedChain);\n        }\n        return new SimpleSequentialChain({ chains });\n    }\n    serialize() {\n        const chains = [];\n        for (const chain of this.chains) {\n            chains.push(chain.serialize());\n        }\n        return {\n            _type: this._chainType(),\n            chains,\n        };\n    }\n}\n"],"names":[],"sourceRoot":""}