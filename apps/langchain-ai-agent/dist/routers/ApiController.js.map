{"version":3,"file":"routers/ApiController.js","mappings":"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","sources":["webpack://langchain-ai-agent/./src/routers/ApiController.ts"],"sourcesContent":["import Router from \"koa-router\";\nimport ApiService from \"../services/ApiService\";\nimport ChatMessageVO from \"../interfaces/ChatMessageVO\";\nimport {\n  chainWithHistory,\n  clearHistoryTalks,\n  createTalk,\n  getHistoryTalks,\n} from \"../agents/en-agent\";\n\nconst apiService = new ApiService();\nconst router = new Router({\n  prefix: \"/api\",\n});\n\nrouter.get(\"/list\", async (ctx) => {\n  const data = await apiService.getInfo();\n  ctx.body = {\n    data,\n  };\n});\nrouter.post(\"/chat\", async (ctx) => {\n  const { content, sessionId } = ctx.request.body as unknown as ChatMessageVO;\n  const msg: ChatMessageVO = {\n    role: \"human\",\n    content,\n    sessionId,\n  };\n\n  // 设置响应头为流式传输\n  ctx.set({\n    \"Content-Type\": \"text/event-stream\",\n    \"Cache-Control\": \"no-cache\",\n    \"Connection\": \"keep-alive\",\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Headers\": \"*\",\n    \"X-Accel-Buffering\": \"no\"  // 禁用 Nginx 缓冲（如果有使用）\n  });\n\n  try {\n    const stream = await chainWithHistory.stream(\n      {\n        input: msg.content,\n      },\n      {\n        configurable: {\n          sessionId: msg.sessionId,\n        },\n      }\n    );\n\n    // 使用 for await...of 处理流\n    for await (const chunk of stream) {\n      const aiMsg: ChatMessageVO = {\n        role: \"ai\",\n        content: chunk.content as string,\n        sessionId,\n      };\n\n      // 发送数据块\n      ctx.res.write(`data: ${JSON.stringify(aiMsg)}\\n\\n`);\n    }\n  } catch (error) {\n    const errorMsg: ChatMessageVO = {\n      role: \"ai\",\n      content: \"发生错误：\" + (error as Error).message,\n      sessionId,\n    };\n    ctx.res.write(`data: ${JSON.stringify(errorMsg)}\\n\\n`);\n  } finally {\n    // 结束流\n    ctx.res.end();\n  }\n});\n\nrouter.get(\"/history\", async (ctx) => {\n  const { sessionId } = ctx.request.query as unknown as {\n    sessionId: string;\n  };\n\n  const historyTalks = await getHistoryTalks(sessionId);\n  const talks = [];\n  for (const talk of historyTalks) {\n    let msg: ChatMessageVO = {\n      role: talk.getType(),\n      content: talk.content as string,\n      sessionId,\n    };\n    talks.push(msg);\n  }\n  ctx.body = {\n    data: talks,\n  };\n});\n\nrouter.get(\"/createTalk\", async (ctx) => {\n  const { sessionId } = ctx.request.query as unknown as {\n    sessionId: string;\n  };\n  const msg = await createTalk(sessionId);\n  ctx.body = {\n    data: {\n      role: msg.getType(),\n      content: msg.content as string,\n      sessionId,\n    },\n  };\n});\n\nrouter.get(\"/clearTalk\", async (ctx) => {\n  const { sessionId } = ctx.request.body as unknown as {\n    sessionId: string;\n  };\n  await clearHistoryTalks(sessionId);\n});\n\nexport default router;\n"],"names":[],"sourceRoot":""}