{"version":3,"file":"agents/chainSessions.js","mappings":";;;;;;;;;;AAUA,gCAUC;AAED,sCAYC;AAED,sCAEC;AAED,oDAOC;AACD,0CAEC;AAED,wCAEC;AAED,sCAEC;AAED,wCAMC;AAlED,0CAAsD;AAQtD,MAAM,OAAO,GAAG,IAAI,GAAG,EAAmB,CAAC;AAE3C,SAAgB,UAAU,CAAC,SAAiB;IAC1C,IAAI,cAAc,CAAC,SAAS,CAAC,EAAE,CAAC;QAC9B,aAAa,CAAC,SAAS,CAAC,CAAC;IAC3B,CAAC;IACD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC;QAC5B,MAAM,UAAU,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC;QAC5C,OAAO,UAAU,CAAC;IACpB,CAAC;IACD,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACvC,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,SAAgB,aAAa,CAAC,SAAiB;IAC7C,IAAI,aAAa,CAAC,SAAS,CAAC,EAAE,CAAC;QAC7B,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;IAC5C,CAAC;IACD,MAAM,UAAU,GAAG,QAAQ,CAAC;IAC5B,MAAM,UAAU,GAAG;QACjB,SAAS;QACT,OAAO,EAAE,IAAI,2BAAkB,EAAE;QACjC,UAAU,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,UAAU;KACpC,CAAC;IACF,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;IACnC,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,SAAgB,aAAa,CAAC,SAAiB;IAC7C,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AAC5B,CAAC;AAED,SAAgB,oBAAoB;IAClC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IACvB,KAAK,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,IAAI,OAAO,EAAE,CAAC;QAC3C,IAAI,OAAO,CAAC,UAAU,GAAG,GAAG,EAAE,CAAC;YAC7B,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAC5B,CAAC;IACH,CAAC;AACH,CAAC;AACD,SAAgB,eAAe;IAC7B,OAAO,OAAO,CAAC,IAAI,CAAC;AACtB,CAAC;AAED,SAAgB,cAAc;IAC5B,OAAO,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;AACtC,CAAC;AAED,SAAgB,aAAa,CAAC,SAAiB;IAC7C,OAAO,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AAChC,CAAC;AAED,SAAgB,cAAc,CAAC,SAAiB;IAC9C,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACvC,IAAI,OAAO,EAAE,CAAC;QACZ,OAAO,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IACzC,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC","sources":["webpack://langchain-ai-agent/./src/agents/chainSessions.ts"],"sourcesContent":["import { ChatMessageHistory } from \"langchain/memory\";\n\nexport interface Session {\n  sessionId: string;\n  history: ChatMessageHistory;\n  expiration: number;\n}\n\nconst mapping = new Map<string, Session>();\n\nexport function getSession(sessionId: string) {\n  if (sessionExpired(sessionId)) {\n    deleteSession(sessionId);\n  }\n  if (!mapping.has(sessionId)) {\n    const newSession = createSession(sessionId);\n    return newSession;\n  }\n  const session = mapping.get(sessionId);\n  return session;\n}\n\nexport function createSession(sessionId: string) {\n  if (sessionExists(sessionId)) {\n    throw new Error(\"Session already exists\");\n  }\n  const expiration = 86400000;\n  const newSession = {\n    sessionId,\n    history: new ChatMessageHistory(),\n    expiration: Date.now() + expiration,\n  };\n  mapping.set(sessionId, newSession);\n  return newSession;\n}\n\nexport function deleteSession(sessionId: string) {\n  mapping.delete(sessionId);\n}\n\nexport function clearExpiredSessions() {\n  const now = Date.now();\n  for (const [sessionId, session] of mapping) {\n    if (session.expiration < now) {\n      mapping.delete(sessionId);\n    }\n  }\n}\nexport function getSessionCount() {\n  return mapping.size;\n}\n\nexport function getSessionList() {\n  return Array.from(mapping.values());\n}\n\nexport function sessionExists(sessionId: string) {\n  return mapping.has(sessionId);\n}\n\nexport function sessionExpired(sessionId: string) {\n  const session = mapping.get(sessionId);\n  if (session) {\n    return session.expiration < Date.now();\n  }\n  return true;\n}\n"],"names":[],"sourceRoot":""}